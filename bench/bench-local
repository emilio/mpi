#!/bin/bash

cd "$(dirname $0)/.."

CPU_COUNT=8
JOB_SIZE=5000

if [ "x$1" != "x" ]; then
  CPU_COUNT="$1"
fi

if [ "x$2" != "x" ]; then
  JOB_SIZE="$2"
fi

BUILD_TYPES="debug all release"
MODES="sync async"
TEST_CASES=bench/test-cases.txt
ME="$(basename $0)"

# Echoes something with the program name in front
pretty_echo() {
  echo -e "\e[34m$ME:\e[0m $@"
}

# Executes a command, saving the output into a temporary file, and shows it if
# appropiate
LOG_FILE=$(mktemp)
checked_command() {
  pretty_echo "$@"
  $@ > $LOG_FILE 2>&1
  if [ $? -ne 0 ]; then
    pretty_echo "\e[91mcommand failed:\e[0m $@"
    pretty_echo "\e[91moutput:\e[31m"
    echo -e "\e[34mdeploy:\e[0m \e[91moutput:\e[31m"
    cat $LOG_FILE
    echo -e "\e[0m"
    rm $LOG_FILE
    exit 1
  fi
}

pretty_echo "found $CPU_COUNT cpus"

# tests all the passwords given to it via arguments in every possible mode,
# build type and cpu count
test_case() {
  pretty_echo "testing passwords: $@"
  for build_type in $BUILD_TYPES; do
    for mode in $MODES; do
      pretty_echo "build_type: $build_type, mode: $mode, job-size: $JOB_SIZE"
      checked_command make clean
      checked_command make JOB_SIZE=$JOB_SIZE MODE=$mode $build_type
      checked_command ./bench/add-ssh
      pretty_echo "cpus: $CPU_COUNT"
      checked_command mpirun -wd $(pwd) -np $CPU_COUNT --hostfile bench/.hosts_file bin/main "$@"
    done
  done
}

TEST_CASES_ARRAY=()

while read -r line; do
  echo $line
  case "$line" in
    \#*) ;; # A comment
    *) TEST_CASES_ARRAY+=("$line");;
  esac
done < "$TEST_CASES"

for line in "${TEST_CASES_ARRAY[@]}"; do
  pretty_echo $line
  test_case "$line"
done
